% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/finalize_explanation.R
\name{compute_MSEv_eval_crit}
\alias{compute_MSEv_eval_crit}
\title{Mean Squared Error of the Contribution Function \code{v(S)}}
\usage{
compute_MSEv_eval_crit(
  internal,
  processed_vS_list,
  p = shapr:::get_p(processed_vS_list$dt_vS, internal),
  exclude_empty_grand_coalitions = TRUE,
  use_shapley_weights = FALSE,
  return_as_dt = TRUE
)
}
\arguments{
\item{internal}{List with the different parameters, data and functions used internally in the \code{\link[=explain]{explain()}} function.}

\item{processed_vS_list}{List of the processed contribution function estimates.
Output from the \code{shapr:::postprocess_vS_list()} function.}

\item{p}{Numeric vector with the predicted responses for the observations which are to be explained.
Output from the \code{shapr:::get_p()} function.}

\item{exclude_empty_grand_coalitions}{Boolean. If \code{TRUE}, we exclude the empty and grand coalitions
when computing the MSEv evaluation criterion. This is reasonable as they are identical for all methods, i.e.,
their contribution function is independent of the used method as they are special cases not effected by
the used method. If \code{TRUE}, we exclude the empty and grand coalitions.}

\item{use_shapley_weights}{Boolean. If \code{TRUE}, then we use the Shapley kernel weights to weight the
different coalitions before taking the mean. If \code{FALSE}, we use regular mean with uniform weights.}

\item{return_as_dt}{Boolean. If the computed MSEv evaluation criterion is
to be returned as \code{\link[data.table]{data.table}}.}
}
\value{
List containing:
\describe{
\item{\code{MSEv_eval_crit}}{Numeric scalar (or \code{\link[data.table]{data.table}} based on parameter
\code{return_as_dt}) with the overall MSEv evaluation criterion averaged over both the coalitions and observations.}
\item{\code{MSEv_eval_crit_explicand}}{Numeric vector (or \code{\link[data.table]{data.table}}
based on parameter \code{return_as_dt}) with the mean squared error for each explicand,
i.e., only averaged over the coalitions.}
\item{\code{MSEv_eval_crit_combination}}{Numeric vector (or \code{\link[data.table]{data.table}}
based on parameter \code{return_as_dt}) with the mean squared error for each coalition,
i.e., only averaged over the observations.}
}
}
\description{
Function that computes the Mean Squared Error (MSEv) of the contribution function
v(s) as proposed by \href{https://arxiv.org/pdf/2006.01272.pdf}{Frye et al. (2019)} and used by
\href{https://www.jmlr.org/papers/volume23/21-1413/21-1413.pdf}{Olsen et al. (2022)}.
}
\details{
The MSEv evaluation criterion does not rely on access to the true contribution functions nor the
true Shapley values to be computed. A lower value indicates better approximations, however, the
scale and magnitude of the MSEv criterion is not directly interpretable in regard to the precision
of the final estimated Shapley values. \href{https://arxiv.org/pdf/2305.09536.pdf}{Olsen et al. (2022)}
illustrates in Figure 11 a fairly strong linear relationship between the MSEv criterion and the
MAE between the estimated and true Shapley values in a simulation study. Note that explicands
refer to the observations whose predictions we are to explain.
}
\examples{
library(xgboost)
library(data.table)
set.seed(1)

data("airquality")
data <- data.table::as.data.table(airquality)
data <- data[complete.cases(data), ]

x_var <- c("Solar.R", "Wind", "Temp", "Month")
y_var <- "Ozone"

ind_x_explain <- 1:6
x_train <- data[-ind_x_explain, ..x_var]
y_train <- data[-ind_x_explain, get(y_var)]
x_explain <- data[ind_x_explain, ..x_var]

# Fitting a basic xgboost model to the training data
model <- xgboost::xgboost(
  data = as.matrix(x_train),
  label = y_train,
  nround = 20,
  verbose = FALSE
)

# Specifying the phi_0, i.e. the expected prediction without any features
p0 <- mean(y_train)

# Computing the actual Shapley values with kernelSHAP accounting for feature dependence using
# the gaussian (conditional) approach
explanation <- explain(
  model = model,
  x_explain = x_explain,
  x_train = x_train,
  approach = "gaussian",
  prediction_zero = p0,
  seed = 1
)

# The `compute_MSEv_eval_crit` function is intended to be only called internally in
# the `shapr` package, but the user can still use it outside of the package.
# Exclude the empty and grand coalitions from the computations and return the result as a data.table
compute_MSEv_eval_crit(
  internal = explanation$internal,
  processed_vS_list = explanation$internal$output,
  exclude_empty_grand_coalitions = TRUE,
  return_as_dt = TRUE
)

# Include the empty and grand coalitions from the computations and return the result as a data.table
compute_MSEv_eval_crit(
  internal = explanation$internal,
  processed_vS_list = explanation$internal$output,
  exclude_empty_grand_coalitions = FALSE,
  return_as_dt = TRUE
)

# Exclude the empty and grand coalitions from the computations and return the result as a list
compute_MSEv_eval_crit(
  internal = explanation$internal,
  processed_vS_list = explanation$internal$output,
  exclude_empty_grand_coalitions = TRUE,
  return_as_dt = FALSE
)

# Include the empty and grand coalitions from the computations and return the result as a list
compute_MSEv_eval_crit(
  internal = explanation$internal,
  processed_vS_list = explanation$internal$output,
  exclude_empty_grand_coalitions = FALSE,
  return_as_dt = FALSE
)

}
\author{
Lars Henry Berge Olsen
}
\keyword{internal}
