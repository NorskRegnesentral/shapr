% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/features.R
\name{feature_combinations}
\alias{feature_combinations}
\title{Define feature combinations, and fetch additional information about each unique combination}
\usage{
feature_combinations(
  m,
  exact = TRUE,
  n_combinations = 200,
  weight_zero_m = 10^6,
  group_num = NULL,
  asymmetric = FALSE,
  causal_ordering = NULL
)
}
\arguments{
\item{m}{Positive integer. Total number of features.}

\item{exact}{Logical. If \code{TRUE} all \code{2^m} combinations are generated, otherwise a
subsample of the combinations is used.}

\item{n_combinations}{Positive integer. Note that if \code{exact = TRUE},
\code{n_combinations} is ignored. However, if \code{m > 12} you'll need to add a positive integer
value for \code{n_combinations}.}

\item{weight_zero_m}{Numeric. The value to use as a replacement for infinite combination
weights when doing numerical operations.}

\item{group_num}{List. Contains vector of integers indicating the feature numbers for the
different groups.}

\item{asymmetric}{Logical. The flag specifies whether we want to compute
asymmetric Shapley values. If so, a causal ordering also needs to be specified
and we only consider variable permutations with the given causal ordering.}

\item{causal_ordering}{List. Contains vectors specifying (partial) causal ordering.
Each element in the list is a component in the order, which can contain one
or more variable indices in a vector. For example, in list(1, c(2, 3)),
2 > 1 and 3 > 1, but 2 and 3 are not comparable.}
}
\value{
A data.table that contains the following columns:
\describe{
\item{id_combination}{Positive integer. Represents a unique key for each combination. Note that the table
is sorted by \code{id_combination}, so that is always equal to \code{x[["id_combination"]] = 1:nrow(x)}.}
\item{features}{List. Each item of the list is an integer vector where \code{features[[i]]}
represents the indices of the features included in combination \code{i}. Note that all the items
are sorted such that \code{features[[i]] == sort(features[[i]])} is always true.}
\item{n_features}{Vector of positive integers. \code{n_features[i]} equals the number of features in combination
\code{i}, i.e. \code{n_features[i] = length(features[[i]])}.}.
\item{N}{Positive integer. The number of unique ways to sample \code{n_features[i]} features
from \code{m} different features, without replacement.}
}
}
\description{
Define feature combinations, and fetch additional information about each unique combination
}
\examples{
# All combinations
x <- feature_combinations(m = 3)
nrow(x) # Equals 2^3 = 8

# Subsample of combinations
x <- feature_combinations(exact = FALSE, m = 10, n_combinations = 1e2)
}
\author{
Nikolai Sellereite, Martin Jullum
}
